-- This file is autogenerated by a script.
-- DO NOT EDIT; any changes may be overwritten.

--[[

Below is a summary of used packages and their sources.
You can copy this section into your README or simly link to this file.

# Third-Party Libraries and Dependencies

## luassert

Summary: Lua assertions extension

Details:
    Adds a framework that allows registering new assertions
    without compromising builtin assertion functionality.

License: MIT <http://opensource.org/licenses/MIT>
Homepage: <https://lunarmodules.github.io/busted/>
Source: <https://github.com/lunarmodules/luassert>

## say

Summary: Lua string hashing/indexing library

Details:
    Useful for internationalization.

License: MIT
Homepage: <https://lunarmodules.github.io/say>
Source: <https://github.com/lunarmodules/say>

--]]

local path_separator = "/"
if package.config then ---@diagnostic disable-line:undefined-field
    path_separator = package.config:sub(1, 1) ---@diagnostic disable-line:undefined-field
end

local redirect_prefix_parts = {
    "lua_modules",
    "share",
    "lua",
    "5.2"
}
local redirect_prefix = table.concat(redirect_prefix_parts, path_separator)

if _VERSION == "Lua 5.2" and serpent and log and table_size and settings and defines then
    -- Factorio, supports '.' in package names (does not replace)

    redirect_prefix = redirect_prefix .. path_separator

    local redirection = {
        ["luassert"] = redirect_prefix .. "luassert/init.lua",
        ["luassert.array"] = redirect_prefix .. "luassert/array.lua",
        ["luassert.assert"] = redirect_prefix .. "luassert/assert.lua",
        ["luassert.assertions"] = redirect_prefix .. "luassert/assertions.lua",
        ["luassert.compatibility"] = redirect_prefix .. "luassert/compatibility.lua",
        ["luassert.formatters"] = redirect_prefix .. "luassert/formatters/init.lua",
        ["luassert.formatters.binarystring"] = redirect_prefix .. "luassert/formatters/binarystring.lua",
        ["luassert.formatters.init"] = redirect_prefix .. "luassert/formatters/init.lua",
        ["luassert.init"] = redirect_prefix .. "luassert/init.lua",
        ["luassert.languages.ar"] = redirect_prefix .. "luassert/languages/ar.lua",
        ["luassert.languages.de"] = redirect_prefix .. "luassert/languages/de.lua",
        ["luassert.languages.en"] = redirect_prefix .. "luassert/languages/en.lua",
        ["luassert.languages.fr"] = redirect_prefix .. "luassert/languages/fr.lua",
        ["luassert.languages.is"] = redirect_prefix .. "luassert/languages/is.lua",
        ["luassert.languages.ja"] = redirect_prefix .. "luassert/languages/ja.lua",
        ["luassert.languages.nl"] = redirect_prefix .. "luassert/languages/nl.lua",
        ["luassert.languages.ru"] = redirect_prefix .. "luassert/languages/ru.lua",
        ["luassert.languages.ua"] = redirect_prefix .. "luassert/languages/ua.lua",
        ["luassert.languages.zh"] = redirect_prefix .. "luassert/languages/zh.lua",
        ["luassert.match"] = redirect_prefix .. "luassert/match.lua",
        ["luassert.matchers"] = redirect_prefix .. "luassert/matchers/init.lua",
        ["luassert.matchers.composite"] = redirect_prefix .. "luassert/matchers/composite.lua",
        ["luassert.matchers.core"] = redirect_prefix .. "luassert/matchers/core.lua",
        ["luassert.matchers.init"] = redirect_prefix .. "luassert/matchers/init.lua",
        ["luassert.mock"] = redirect_prefix .. "luassert/mock.lua",
        ["luassert.modifiers"] = redirect_prefix .. "luassert/modifiers.lua",
        ["luassert.namespaces"] = redirect_prefix .. "luassert/namespaces.lua",
        ["luassert.spy"] = redirect_prefix .. "luassert/spy.lua",
        ["luassert.state"] = redirect_prefix .. "luassert/state.lua",
        ["luassert.stub"] = redirect_prefix .. "luassert/stub.lua",
        ["luassert.util"] = redirect_prefix .. "luassert/util.lua",
        ["say"] = redirect_prefix .. "say/init.lua",
        ["say.init"] = redirect_prefix .. "say/init.lua",
    }

    local original_require = require
    require = function(module_name)
        if redirection[module_name] then
            log([[Redirecting require.
            From: ]] .. module_name .. [[
            To: ]] .. redirection[module_name])
        end

        return original_require(redirection[module_name] or module_name)
    end
else
    -- Windows, macOS or Linux, replaces '.' in package names, but supports extending package.path

    local path_extension_parts = {
        "%s;%s",
        "?.lua;%s",
        "?",
        "init.lua"
    }
    local path_extension = table.concat(path_extension_parts, path_separator)

    package.path = (path_extension):format(
        package.path, redirect_prefix, redirect_prefix)
end
